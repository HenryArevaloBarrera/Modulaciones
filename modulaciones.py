import streamlit as st
import matplotlib.pyplot as plt
import numpy as np

# Configurar el ancho de la p√°gina
st.set_page_config(layout="wide")  # Dise√±o de p√°gina ancha

# Par√°metros iniciales
fc = 10.0  # Frecuencia de la portadora (Hz)
fm = 1.0   # Frecuencia de la moduladora (Hz)
Ac = 1.0   # Amplitud de la portadora
Am = 0.5   # Amplitud de la moduladora
t = np.linspace(0, 1, 1000)  # Vector de tiempo (1 segundo)

# Funci√≥n para convertir texto a binario
def texto_a_binario(texto):
    return ''.join(format(ord(char), '08b') for char in texto)  # 8 bits por car√°cter

# Funci√≥n para generar la se√±al digital
def generar_senal_digital(binario, t):
    se√±al = np.zeros_like(t)
    bits_por_segundo = len(binario)  # Un bit por unidad de tiempo
    for i, bit in enumerate(binario):
        se√±al[int(i * len(t) / bits_por_segundo):int((i + 1) * len(t) / bits_por_segundo)] = int(bit)
    return se√±al

# Se√±al portadora (modificada para recibir par√°metros)
def generar_portadora(t, fc, Ac):
    return Ac * np.sin(2 * np.pi * fc * t)

# Se√±al moduladora anal√≥gica (modificada para recibir par√°metros)
def generar_moduladora_analogica(t, fm, Am):
    return Am * np.sin(2 * np.pi * fm * t)

# Funciones para cada tipo de modulaci√≥n (actualizadas)
def modulacion_AM(t, fc, fm, Ac, Am):
    portadora = generar_portadora(t, fc, Ac)
    moduladora = generar_moduladora_analogica(t, fm, Am)
    modulada = (Ac + moduladora) * portadora / Ac  # Manteniendo l√≥gica original
    return modulada, "Modulaci√≥n AM", portadora, moduladora

def modulacion_FM(t, fc, fm, Ac, Am):
    kf = 5  # Sensibilidad de frecuencia (fijo como en original)
    portadora = generar_portadora(t, fc, Ac)
    moduladora = generar_moduladora_analogica(t, fm, Am)
    modulada = Ac * np.sin(2 * np.pi * fc * t + 2 * np.pi * kf * np.cumsum(moduladora) * (t[1] - t[0]))
    return modulada, "Modulaci√≥n FM", portadora, moduladora

def modulacion_PM(t, fc, fm, Ac, Am):
    kp = 5  # Sensibilidad de fase (fijo como en original)
    portadora = generar_portadora(t, fc, Ac)
    moduladora = generar_moduladora_analogica(t, fm, Am)
    modulada = Ac * np.sin(2 * np.pi * fc * t + kp * moduladora)
    return modulada, "Modulaci√≥n PM", portadora, moduladora

def modulacion_ASK(t, fc, Ac, se√±al_digital):
    portadora = generar_portadora(t, fc, Ac)
    modulada = Ac * se√±al_digital * portadora
    return modulada, "Modulaci√≥n ASK", portadora, se√±al_digital

def modulacion_PSK(t, fc, Ac, se√±al_digital):
    portadora = generar_portadora(t, fc, Ac)
    modulada = Ac * np.sin(2 * np.pi * fc * t + np.pi * se√±al_digital)
    return modulada, "Modulaci√≥n PSK", portadora, se√±al_digital

def modulacion_FSK(t, fc, Ac, se√±al_digital):
    f1, f2 = 5, 15  # Frecuencias para 0 y 1 (fijas como en original)
    portadora = generar_portadora(t, fc, Ac)
    modulada = Ac * np.sin(2 * np.pi * (f1 + (f2 - f1) * se√±al_digital) * t)
    return modulada, "Modulaci√≥n FSK", portadora, se√±al_digital

# Interfaz de Streamlit
st.title("üì° Simulador de Modulaciones")

# Crear dos columnas con anchos personalizados
col1, col2 = st.columns([1, 3])  # col1 m√°s estrecha (25%), col2 m√°s ancha (75%)

# Controles en la columna izquierda
with col1:
    st.header("‚öôÔ∏è Par√°metros")

    # Selector de modulaci√≥n
    seleccion = st.selectbox(
        "Selecciona el tipo de modulaci√≥n:",
        ["AM", "FM", "PM", "ASK", "PSK", "FSK"]
    )

    # Mostrar par√°metros seg√∫n el tipo de modulaci√≥n
    if seleccion in ["AM", "FM", "PM"]:
        fc = st.slider("Frecuencia portadora (Hz):", min_value=1.0, max_value=20.0, value=fc, step=0.1)
        fm = st.slider("Frecuencia moduladora (Hz):", min_value=0.1, max_value=5.0, value=fm, step=0.1)
        Ac = st.slider("Amplitud portadora:", min_value=0.1, max_value=2.0, value=Ac, step=0.1)
        Am = st.slider("Amplitud moduladora:", min_value=0.1, max_value=1.0, value=Am, step=0.1)
    elif seleccion in ["ASK", "PSK", "FSK"]:
        mensaje = st.text_input("Ingresa un mensaje:", "Hola")
        binario = texto_a_binario(mensaje)
        st.write(f"üî¢ Mensaje en binario: {binario}")
        fc = st.slider("Frecuencia portadora (Hz):", min_value=1.0, max_value=20.0, value=fc, step=0.1)
        Ac = st.slider("Amplitud portadora:", min_value=0.1, max_value=2.0, value=Ac, step=0.1)

# Generar la se√±al seg√∫n el tipo de modulaci√≥n
if seleccion in ["AM", "FM", "PM"]:
    if seleccion == "AM":
        modulada, titulo, portadora, moduladora = modulacion_AM(t, fc, fm, Ac, Am)
    elif seleccion == "FM":
        modulada, titulo, portadora, moduladora = modulacion_FM(t, fc, fm, Ac, Am)
    elif seleccion == "PM":
        modulada, titulo, portadora, moduladora = modulacion_PM(t, fc, fm, Ac, Am)
    se√±al_adicional = moduladora
else:
    senal_digital = generar_senal_digital(binario, t)
    if seleccion == "ASK":
        modulada, titulo, portadora, se√±al_adicional = modulacion_ASK(t, fc, Ac, senal_digital)
    elif seleccion == "PSK":
        modulada, titulo, portadora, se√±al_adicional = modulacion_PSK(t, fc, Ac, senal_digital)
    elif seleccion == "FSK":
        modulada, titulo, portadora, se√±al_adicional = modulacion_FSK(t, fc, Ac, senal_digital)

# Configurar estilo de gr√°ficos
plt.style.use('seaborn-v0_8')
fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 12))

# Gr√°fico 1: Se√±al modulada
ax1.plot(t, modulada, label="Se√±al modulada", color="#1f77b4", linewidth=2)
ax1.set_title(f"{titulo} - Se√±al Modulada", fontsize=12, fontweight='bold')
ax1.set_xlabel("Tiempo [s]", fontsize=10)
ax1.set_ylabel("Amplitud", fontsize=10)
ax1.legend(fontsize=9)
ax1.grid(True, linestyle='--', alpha=0.6)

# Gr√°fico 2: Portadora
ax2.plot(t, portadora, label="Portadora", linestyle="--", color="#ff7f0e", alpha=0.7, linewidth=1.5)
ax2.set_title("Se√±al Portadora", fontsize=12, fontweight='bold')
ax2.set_xlabel("Tiempo [s]", fontsize=10)
ax2.set_ylabel("Amplitud", fontsize=10)
ax2.legend(fontsize=9)
ax2.grid(True, linestyle='--', alpha=0.6)

# Gr√°fico 3: Moduladora o se√±al digital
if seleccion in ["AM", "FM", "PM"]:
    ax3.plot(t, se√±al_adicional, label="Se√±al Moduladora", linestyle=":", color="#2ca02c", alpha=0.7, linewidth=1.5)
else:
    ax3.plot(t, se√±al_adicional, label="Se√±al Digital", linestyle=":", color="#2ca02c", alpha=0.7, linewidth=1.5)
ax3.set_title("Se√±al Moduladora/Digital", fontsize=12, fontweight='bold')
ax3.set_xlabel("Tiempo [s]", fontsize=10)
ax3.set_ylabel("Amplitud", fontsize=10)
ax3.legend(fontsize=9)
ax3.grid(True, linestyle='--', alpha=0.6)

# Ajustar espacio entre subplots
plt.tight_layout()

# Mostrar los gr√°ficos en la columna derecha
with col2:
    st.header("üìä Visualizaci√≥n")
    st.pyplot(fig)
    
    # Informaci√≥n adicional
    if seleccion == "AM":
        mu = Am/Ac  # Calculando √≠ndice de modulaci√≥n
        st.info(f"""
        **Par√°metros de AM:**
        - √çndice de modulaci√≥n (Œº): {mu:.2f} {"(Sobremodulaci√≥n ‚ö†Ô∏è)" if mu > 1 else "(Correcto ‚úÖ)"}
        - Ancho de banda te√≥rico: {2*fm:.1f} Hz
        """)
    elif seleccion == "FM":
        kf = 5  # Valor fijo como en la l√≥gica original
        desviacion = kf * Am
        beta = desviacion / fm
        st.info(f"""
        **Par√°metros de FM:**
        - Sensibilidad de frecuencia (kf): {kf} Hz/V
        - Desviaci√≥n de frecuencia (Œîf): {desviacion:.1f} Hz
        - √çndice de modulaci√≥n (Œ≤): {beta:.2f}
        """)
    elif seleccion == "PM":
        kp = 5  # Valor fijo como en la l√≥gica original
        st.info(f"""
        **Par√°metros de PM:**
        - Sensibilidad de fase (kp): {kp} rad/V
        - Desviaci√≥n de fase m√°xima: {kp * Am:.2f} rad
        """)

# Explicaci√≥n te√≥rica
st.markdown("---")
st.subheader("üéì Explicaci√≥n Te√≥rica")

if seleccion == "AM":
    st.markdown("""
    **Modulaci√≥n de Amplitud (AM):**
    - La amplitud de la portadora var√≠a seg√∫n la se√±al moduladora.
    - Ecuaci√≥n: $s(t) = A_c[1 + Œº¬∑m(t)]¬∑\sin(2œÄf_ct)$
    - Œº debe ser ‚â§ 1 para evitar distorsi√≥n.
    """)
elif seleccion == "FM":
    st.markdown("""
    **Modulaci√≥n de Frecuencia (FM):**
    - La frecuencia instant√°nea var√≠a seg√∫n la se√±al moduladora.
    - Ecuaci√≥n: $s(t) = A_c¬∑\sin(2œÄf_ct + 2œÄk_f‚à´m(t)dt)$
    - Mayor kf ‚Üí mayor desviaci√≥n de frecuencia.
    """)
elif seleccion == "PM":
    st.markdown("""
    **Modulaci√≥n de Fase (PM):**
    - La fase instant√°nea var√≠a seg√∫n la se√±al moduladora.
    - Ecuaci√≥n: $s(t) = A_c¬∑\sin(2œÄf_ct + k_p¬∑m(t))$
    - Similar a FM pero proporcional a m(t) en lugar de su integral.
    """)
elif seleccion == "ASK":
    st.markdown("""
    **Modulaci√≥n por Desplazamiento de Amplitud (ASK):**
    - La amplitud de la portadora cambia seg√∫n los bits (1 = presencia, 0 = ausencia).
    - Simple pero sensible al ruido.
    """)
elif seleccion == "PSK":
    st.markdown("""
    **Modulaci√≥n por Desplazamiento de Fase (PSK):**
    - La fase de la portadora cambia seg√∫n los bits (ej: 0¬∞ para 0, 180¬∞ para 1).
    - M√°s eficiente que ASK en ancho de banda.
    """)
elif seleccion == "FSK":
    st.markdown("""
    **Modulaci√≥n por Desplazamiento de Frecuencia (FSK):**
    - La frecuencia de la portadora cambia seg√∫n los bits.
    - M√°s robusta al ruido que ASK pero requiere m√°s ancho de banda.
    """)
